{"version":3,"sources":["components/My-Task-List/index.js","components/My-Task-List/My-Task-List.jsx","App.js","reportWebVitals.js","index.js"],"names":["MyTaskList","props","componentDidMount","getTasks","onChange","event","setState","target","name","value","onSubmit","state","task","tasklist","JSON","parse","localStorage","getItem","status","push","setItem","stringify","sort","a","b","map","item","index","color","cardBackground","background","taskComplete","textDecoration","Card","fluid","style","Content","Header","textAlign","wordWrap","Meta","Icon","link","onClick","updateTask","paddingRight","undoTask","deleteTask","splice","as","className","Form","this","Input","type","placeholder","Group","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.11768267.chunk.js","sourcesContent":["import MyTaskList from \"./My-Task-List\";\r\n\r\nexport default MyTaskList;","import React, { Component } from \"react\";\r\nimport { Card, Header, Form, Input, Icon } from \"semantic-ui-react\";\r\nimport \"./my-task-list.css\";\r\n\r\nclass MyTaskList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            task: \"\",\r\n            tasklist: []\r\n        };\r\n    }\r\n\r\n    // on load get the task list\r\n    componentDidMount = () => {\r\n        this.getTasks();\r\n    };\r\n\r\n    onChange = event => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    };\r\n\r\n    // add task to the list\r\n    onSubmit = () => {\r\n        // check is task is empty string\r\n        if (this.state.task) {\r\n            // get the task list from the local storage\r\n            let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"));\r\n\r\n            // task list is null means empty\r\n            // create an empty list\r\n            if (tasklist == null) {\r\n                tasklist = [];\r\n            }\r\n\r\n            // create task object\r\n            // default status is false\r\n            let task = {\r\n                task: `? ${this.state.task}`,\r\n                status: false\r\n            };\r\n\r\n            // add the task to the task list\r\n            tasklist.push(task);\r\n\r\n            // save the task list in the local storage\r\n            localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\r\n\r\n            // clear the form\r\n            this.setState({ task: \"\" });\r\n\r\n            // refresh the tasks\r\n            this.getTasks();\r\n        }\r\n    };\r\n\r\n    // get all the tasks\r\n    getTasks = () => {\r\n        // get the task list from the local storage\r\n        let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"));\r\n\r\n        // check if task list is empty\r\n        if (tasklist) {\r\n            // sort all the tasks on the basis of status\r\n            // completed task will move down\r\n            tasklist = tasklist.sort((a, b) => {\r\n                if (a.status) {\r\n                    return 1;\r\n                } else if (b.status) {\r\n                    return -1;\r\n                }\r\n                return 0;\r\n            });\r\n\r\n            // save the task list in the local storage\r\n            localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\r\n\r\n            // set the tasklist to the state\r\n            this.setState({\r\n                // default color\r\n                // Incomplete: yellow\r\n                // complete: green\r\n                tasklist: tasklist.map((item, index) => {\r\n                    let color = \"yellow\";\r\n                    let cardBackground = { background: \"white\" };\r\n                    let taskComplete = { textDecoration: \"none\" };\r\n\r\n                    if (item.status) {\r\n                        color = \"green\";\r\n                        cardBackground.background = \"beige\";\r\n                        taskComplete[\"textDecoration\"] = \"line-through\";\r\n                    }\r\n                    return (\r\n                        <Card key={index} color={color} fluid style={cardBackground}>\r\n                            <Card.Content>\r\n                                <Card.Header textAlign=\"left\" style={taskComplete}>\r\n                                    <div style={{ wordWrap: \"break-word\" }}>{item.task}</div>\r\n                                </Card.Header>\r\n\r\n                                <Card.Meta textAlign=\"right\">\r\n                                    <Icon\r\n                                        link\r\n                                        name=\"check circle\"\r\n                                        color=\"green\"\r\n                                        onClick={() => this.updateTask(index)}\r\n                                    />\r\n                                    <span style={{ paddingRight: 10 }}>Done</span>\r\n                                    <Icon\r\n                                        link\r\n                                        name=\"undo\"\r\n                                        color=\"yellow\"\r\n                                        onClick={() => this.undoTask(index)}\r\n                                    />\r\n                                    <span style={{ paddingRight: 10 }}>Undo</span>\r\n                                    <Icon\r\n                                        link\r\n                                        name=\"delete\"\r\n                                        color=\"red\"\r\n                                        onClick={() => this.deleteTask(index)}\r\n                                    />\r\n                                    <span style={{ paddingRight: 10 }}>Delete</span>\r\n                                </Card.Meta>\r\n                            </Card.Content>\r\n                        </Card>\r\n                    );\r\n                })\r\n            });\r\n        }\r\n    };\r\n\r\n    // update the task status to true\r\n    updateTask = index => {\r\n        // get the task list from the local storage\r\n        let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"));\r\n        // change status to true\r\n        tasklist[index].status = true;\r\n        // save the updated task list\r\n        localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\r\n        // refresh the task list\r\n        this.getTasks();\r\n    };\r\n\r\n    // undone the task status from true to false\r\n    undoTask = index => {\r\n        // get the task list from the local storage\r\n        let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"));\r\n        // change status to false\r\n        tasklist[index].status = false;\r\n        // save the updated task list\r\n        localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\r\n        // refresh the task list\r\n        this.getTasks();\r\n    };\r\n\r\n    // delete the task from the task list\r\n    deleteTask = index => {\r\n        // get the task list from the local storage\r\n        let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"));\r\n        // remove the task from the task list\r\n        tasklist.splice(index, 1);\r\n        // save the updated task list\r\n        localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\r\n        // refresh the task list\r\n        this.getTasks();\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <Header as=\"h1\">\r\n                        <div className=\"app-header\">? My Task List</div>{\" \"}\r\n                    </Header>\r\n                </div>\r\n                <div className=\"app-form\">\r\n                    <Form onSubmit={this.onSubmit}>\r\n                        <Input\r\n                            type=\"text\"\r\n                            name=\"task\"\r\n                            onChange={this.onChange}\r\n                            value={this.state.task}\r\n                            fluid\r\n                            placeholder=\"task...\"\r\n                        />\r\n                    </Form>\r\n                </div>\r\n                <div>\r\n                    <Card.Group>{this.state.tasklist}</Card.Group>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MyTaskList;","import React from \"react\";\r\nimport \"./App.css\";\r\nimport MyTaskList from \"./components/My-Task-List\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div>\r\n            <MyTaskList></MyTaskList>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}